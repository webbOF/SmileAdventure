openapi: 3.0.3
info:
  title: SmileAdventure Users API
  description: API per la gestione degli utenti di SmileAdventure
  version: 1.0.0
servers:
  - url: http://localhost:8001/api/v1
    description: Development server
  - url: https://api.smileadventure.com/users/api/v1
    description: Production server

paths:
  /users/:
    get:
      summary: Ottiene la lista degli utenti
      description: Restituisce una lista paginata di utenti
      parameters:
        - name: skip
          in: query
          description: Numero di record da saltare per la paginazione
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: Numero massimo di record da restituire
          required: false
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: Operazione completata con successo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Non autorizzato
          
    post:
      summary: Crea un nuovo utente
      description: Crea un nuovo utente nel sistema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Utente creato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Richiesta non valida
        '409':
          description: Email gi√† registrata

  /users/{user_id}:
    get:
      summary: Ottiene un utente specifico
      description: Restituisce i dettagli di un utente specifico
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Operazione completata con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Utente non trovato
        '401':
          description: Non autorizzato
    
    patch:
      summary: Aggiorna un utente
      description: Aggiorna i dati di un utente esistente
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Utente aggiornato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Utente non trovato
        '401':
          description: Non autorizzato
    
    delete:
      summary: Elimina un utente
      description: Elimina un utente dal sistema
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Utente eliminato con successo
        '404':
          description: Utente non trovato
        '401':
          description: Non autorizzato

components:
  schemas:
    UserRole:
      type: string
      enum:
        - child
        - parent
        - professional
        - admin
      
    UserProfileBase:
      type: object
      properties:
        avatar_url:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        preferences:
          type: object
          nullable: true
          
    UserProfileCreate:
      allOf:
        - $ref: '#/components/schemas/UserProfileBase'
      
    UserProfile:
      allOf:
        - $ref: '#/components/schemas/UserProfileBase'
        - type: object
          required:
            - id
            - user_id
          properties:
            id:
              type: integer
            user_id:
              type: integer
      
    UserBase:
      type: object
      required:
        - email
        - full_name
        - role
      properties:
        email:
          type: string
          format: email
        full_name:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
          
    UserCreate:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          required:
            - password
          properties:
            password:
              type: string
              minLength: 8
            profile:
              $ref: '#/components/schemas/UserProfileCreate'
              
    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
          nullable: true
        full_name:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        profile:
          $ref: '#/components/schemas/UserProfileCreate'
          nullable: true
          
    User:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          required:
            - id
            - is_active
            - created_at
          properties:
            id:
              type: integer
            is_active:
              type: boolean
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
              nullable: true
            profile:
              $ref: '#/components/schemas/UserProfile'
              nullable: true

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
