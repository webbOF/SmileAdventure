services:
  api-gateway:
    build: ./microservices/API-GATEWAY
    container_name: smileadventure-api-gateway
    ports:
      - "8000:8000"
    volumes:
      - ./microservices/API-GATEWAY/src:/app/src
    depends_on:
      auth:
        condition: service_healthy
      users:
        condition: service_healthy
      reports:
        condition: service_healthy
      game:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    environment:
      - AUTH_SERVICE_URL=http://auth:8001/api/v1
      - USERS_SERVICE_URL=http://users:8006/api/v1
      - REPORTS_SERVICE_URL=http://reports:8007/api/v1
      - GAME_SERVICE_URL=http://game:8005/api/v1
      # La JWT_SECRET_KEY non Ã¨ usata direttamente qui, ma nel servizio Auth
    networks:
      - smileadventure-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/status').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  auth:
    build: ./microservices/Auth
    container_name: smileadventure-auth-service
    ports:
      - "8001:8001"
    volumes:
      - ./microservices/Auth/src:/app/src
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      # DATABASE_URL costruita usando le variabili dal file .env
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${POSTGRES_DB}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY} # Legge dalla variabile definita nel .env
      - JWT_EXPIRE_MINUTES=30
    networks:
      - smileadventure-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/status').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  users:
    build: ./microservices/Users
    container_name: smileadventure-users-service
    ports:
      - "8006:8006"
    # Aggiunto volume per sviluppo - auto-reload
    volumes:
      - ./microservices/Users/src:/app/src
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      # DATABASE_URL costruita usando le variabili dal file .env
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${POSTGRES_DB}
    networks:
      - smileadventure-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8006/status').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  reports:
    build: ./microservices/Reports
    container_name: smileadventure-reports-service
    ports:
      - "8007:8007"
    volumes:
      - ./microservices/Reports/src:/app/src
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      # REPORTS_DATABASE_URL costruita usando le variabili dal file .env
      - REPORTS_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${POSTGRES_DB}
    networks:
      - smileadventure-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8007/status').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # volumes: # Removed SQLite volume, data will be in postgres-db
      # - ./Reports/data:/app/data 

  game:
    build: ./microservices/Game
    container_name: smileadventure-game-service
    ports:
      - "8005:8005"
    volumes:
      - ./microservices/Game/src:/app/src
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${POSTGRES_DB}
    networks:
      - smileadventure-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8005/status').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  postgres-db:
    image: postgres:15-alpine
    container_name: smileadventure-postgres-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER} # Legge dal .env
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} # Legge dal .env
      - POSTGRES_DB=${POSTGRES_DB} # Legge dal .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports: # Optional: expose port for direct access/debugging
      - "5433:5432" 
    networks:
      - smileadventure-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smileadventureuser -d smileadventure -q"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # Give it some time to initialize
    restart: unless-stopped

  web:
    stdin_open: true
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:8000/api/v1
    build:
      context: ./frontend/docker-react
      dockerfile: Dockerfile.dev
    ports:
      - '3000:3000'
    volumes:
      - /app/node_modules
      - ./frontend/docker-react:/app
    networks:
      - smileadventure-network
    depends_on:
      - api-gateway

  tests:
    stdin_open: true
    build:
      context: ./frontend/docker-react
      dockerfile: Dockerfile.dev
    volumes:
      - /app/node_modules
      - ./frontend/docker-react:/app
    command: ['npm', 'run', 'test']
    networks:
      - smileadventure-network

  er-diagrams:
    image: python:3.10-slim
    container_name: smileadventure-er-diagrams
    volumes:
      - ./:/app
      - ./docs/diagrams:/app/docs/diagrams
    working_dir: /app
    command: >
      sh -c "
        apt-get update && 
        apt-get install -y graphviz graphviz-dev pkg-config gcc g++ && 
        pip3 install eralchemy2 sqlalchemy pygraphviz && 
        mkdir -p /app/docs/diagrams &&
        python3 -c 'from scripts.er_model import generate_diagrams; generate_diagrams()'
      "
    networks:
      - smileadventure-network
    depends_on:
      - postgres-db # ER diagrams should wait for the DB to be available
      # auth and users services are not direct dependencies for diagram generation from models
      # but the models they use will now point to PostgreSQL

  db-init:
    image: python:3.10-slim
    container_name: smileadventure-db-init
    volumes:
      - ./:/app
    working_dir: /app
    environment: # Passa le credenziali del DB anche a db-init se necessario per gli script
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${POSTGRES_DB}
      - PYTHONPATH=/app/microservices # Aggiunto PYTHONPATH per risolvere gli import
    command: >
      sh -c "
        pip install sqlalchemy psycopg2-binary && # Added psycopg2-binary for PostgreSQL
        python scripts/db_init.py &&
        python scripts/seeds_gen.py
      "
    networks:
      - smileadventure-network
    depends_on: # db-init should wait for postgres-db
      - postgres-db

networks:
  smileadventure-network:
    driver: bridge

volumes: # Added named volume for PostgreSQL data
  postgres_data: